// CheckList
  > 가장 큰 수를 찾도록 정렬하기 
1. 삽입 정렬 알고리즘 이용
  > 처음엔 정렬 알고리즘을 이용하려고 삽입 정렬을 구현함
  > 삽입 정렬은 배열의 두번째 요소부터 자신의 왼쪽(0번 인덱스 방향)과 비교하여 정렬을 함
  > 왼쪽 방향은 항상 정렬되어 있음(있어야 한다!)
  > 정렬 해야할 경우(조건에 맞을 경우) left보다 하나 큰 쪽으로 옮기고, left를 감소한다.
  > 반복문이 끝나면 value(cur)를 left + 1로 옮긴다. (while 문에 걸리든 안 걸리든 가능)
   const insertion = (numbers) => {
    for (let i = 1; i < numbers.length; i++) {
        const cur = String(numbers[i]);
        let left = i - 1;
        while ( left >= 0 && cur > numbers[left]) { // 일반적인 오름차순으로 변경
            numbers[left + 1] = numbers[left];
            left--;
        }
    numbers[left + 1] = cur;
    }
    return numbers;
    };

    > 두개의 테스트케이스는 통과했으나 [0, 0, 0]인 경우와 시간초과로 실패
2. Javascript method 이용 (sort)
    > sort 알고리즘은 유니코드를 이용해서 cb가 없을 경우 오름차순으로 정렬
    > 특정 정렬 기준을 정하긴 위해선 sort에 cb를 전달해야 하고,
    > 해당 결과가 -1 (음수)를 반환할 때 요소들을 swap한다.
    > 오름차순 : a - b 
        >  (a > b) === 1 , (a = b) === 0 ,  (a < b) === -1
    > 내림차순 : b - a
        >  (b > a) === -1 , (b = a) === 0 , (b < a) === -1

    > 문제 응용 해설 : 해당 문제는 숫자들을 더해서 비교하는게 아니라 숫자를 문자열로 더해서 비교해야 함
        > (b + a) - (a + b) > b - a > 내림차순

    > BEST Solution! : map으로 배열을 한번씩 순회할 필요없이 ``으로 바로 계산을 할 수 있음!!
    > [0, 0, 0] 케이스에 대한 방어 코드 === 가장 큰 수여야 할 첫자리가 0일 경우 0을 반환한다.