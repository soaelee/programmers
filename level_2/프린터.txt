CheckList
1. Queue 자료구조 (FIFO: First In First Out : 가장 오래된 항목이 가장 먼저 제거)
 > 제한적으로 접근할 수 있는 배열 구조
 > 접근 방법은 한쪽 끝(rare)에서는 자료를 넣고 다른 한쪽 끝(front)에서는 뺄 수만 있는 선형 구조
 > Method 
    > shift() == dequeue
    > pop() == enqueue
 > Example : 실제로 프린터와 같은 경우 Queue를 사용

사고과정
1. 첫번째 요소를 꺼낸다 (shift)
2. 배열 내의 가장 큰 수와 비교를 한다.
3-1. 가장 큰 경우, answer를 1 더한다(랭킹 개념)
3-1-1. 첫번째 요소를 꺼내고, 가장 큰 수인 경우, location이 0번째인지 확인한다.
3-1-2. 0번째 일 경우, 반복문을 종료한다. (location에 해당하는 요소가 출력되었다는 의미)
3-2. 가장 큰 수가 아닌 경우(우선순위가 가장 높지 않을 경우), 다시 마지막 요소로 넣는다 (push)
4. 앞의 요소를 꺼냈으므로 인덱스가 모두 하나씩 줄어들었다. 비교해야할 location도 -1을 한다.
4-1. 1을 뺀 location이 -1일 경우, 해당 수가 가장 마지막으로 push되었음을 의미하므로, location또한 배열의 length로 바꾼다.
5. answer를 반환한다. (location을 가졌던 요소가 출력된 순서) 