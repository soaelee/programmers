// CheckList
1. 접근과정
    > 해당 문제는 배열의 숫자들이 음수와 양수인 경우를 모두 탐색해야 함
    > 경우의 수를 모두 고려해야 하므로 DFS 알고리즘이 가장 적합하다.
    > 제일 처음 요소부터 출발해서 배열의 마지막까지 함수를 반복한다(재귀함수)
    > 재귀함수에서 가장 중요한 점은 종료지점 : index를 계속 증가시켜 배열의 마지막엔 재호출을 하지 않고 종료하도록 꼭 마무리 짓는다.
2. DFS 알고리즘 (Deep First Search : 깊이 우선 탐색)
    > 현재 정점(노드)에서 탐색이 가능한 정점(마지막 노드)까지 탐색한다.
    > 모든 경로를 탐색할 때 사용하는 알고리즘 (최단 거리를 찾는 경우는 BFS가 유리)
    > 재귀함수, 스택을 이용해 구현함

    > 활용예시 : 특정구간을 탐색할 때도 유용하다. (2가 포함된 경로찾기 등)
    
   


// Reference
   > JS로 DFS, BFS 구현하기 (https://velog.io/@sangbooom/JS-BFS-DFS) 